buildscript {
    repositories {
        mavenCentral()
    }
}

def printOutput(def output) {
    return tasks.create("printOutput") {
        println "#educational_plugin_checker_version 1"
        def separator = System.lineSeparator()
        def lines = output.toString().split("(?<=${separator})|(?=${separator})")
        for (line in lines) {
            println "#educational_plugin" + line
        }
    }
}

subprojects {
    apply plugin: 'application'
    apply plugin: 'java'

    sourceCompatibility = JavaVersion.VERSION_17//JavaLanguageVersion.of(17)

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation group: 'junit', name: 'junit', version: '4.12'

        //PI4J Dependencies
        implementation 'com.pi4j:pi4j-core:2.2.0'
        implementation 'com.pi4j:pi4j-plugin-raspberrypi:2.2.0'
        implementation 'com.pi4j:pi4j-plugin-pigpio:2.2.0'
        implementation 'com.pi4j:pi4j-plugin-mock:2.2.0'
        implementation 'com.pi4j:pi4j-plugin-linuxfs:2.2.0'
        implementation 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
        implementation 'org.junit.jupiter:junit-jupiter-params:5.7.1'

        //javafx Dependencies
        //implementation 'org.openjfx:javafx-base:17.0.1'
        //implementation 'org.openjfx:javafx-graphics:17.0.1'
        //implementation 'org.openjfx:javafx-controls:17.0.1'
        //implementation 'org.openjfx:javafx:17.0.1'
    }

    sourceSets {
        main {
            java.srcDir 'src'
        }
        test {
            java.srcDir 'test'
        }
    }

    mainClassName = project.hasProperty("mainClass") ? project.getProperty("mainClass") : ""

    if (project.hasProperty("educationalRun") && "true".equalsIgnoreCase(project.getProperty("educationalRun"))) {
        def runOutput = new ByteArrayOutputStream()
        tasks.run.setStandardOutput(runOutput)
        tasks.run.doLast { printOutput(runOutput) }
    }
}